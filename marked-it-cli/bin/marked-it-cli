#!/usr/bin/env node

/*******************************************************************************
 * Copyright (c) 2014, 2016 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials are made 
 * available under the terms of the Eclipse Public License v1.0 
 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
 * 
 * Contributors: IBM Corporation - initial API and implementation
 ******************************************************************************/

/*eslint-env node */
var mdProcessor = require("../lib/mdProcessor");
var logger = require("../lib/logger");

var ARG_SOURCEDIR = "--sourceDir";
var ARG_OUTPUT = "--output";
var SWITCH_OVERWRITE = "--overwrite";
var SWITCH_ATTRIBUTES = "--disable-attributes";
var SWITCH_FRONTMATTER = "--disable-front-matter";
var SWITCH_PDF = "--gen-pdf";
var SWITCH_VERBOSE = "--verbose";
var SWITCH_DEBUG = "--debug";
var SWITCH_TOCXML = "--toc-xml";
var SWITCH_TOCHTML = "--toc-html";
var SWITCH_TOCDITA = "--toc-dita";
var OPTION_TOC_DEPTH = "--toc-depth";
var OPTION_PDFOPTIONSFILE = "--pdf-options-file";
var OPTION_EXTENSIONFILE = "--extension-file";
var OPTION_HEADERFILE = "--header-file";
var OPTION_FOOTERFILE = "--footer-file";
var OPTION_CONREFFILE = "--conref-file";
var SWITCH_HELP = "--help";

var DEFAULT_TOC_DEPTH = 3;

var sourceDir, destDir;
var overwrite, disableAttributes, disableFrontMatter, genPdf, verbose, debug;
var headerFile, footerFile, pdfOptionsFile, conrefFile;
var extensionFiles = [];
var tocXML, tocDITA, tocHTML, tocDepth;
var help;

var switchCounter = 0;
process.argv.forEach(function(arg) {
	switchCounter++;
	if (arg.indexOf(ARG_OUTPUT) === 0 && arg.indexOf("=") !== -1) {
		destDir = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(SWITCH_OVERWRITE) === 0) {
		overwrite = true;
	} else if (arg.indexOf(SWITCH_ATTRIBUTES) === 0) {
		disableAttributes = true;
	} else if (arg.indexOf(SWITCH_FRONTMATTER) === 0) {
		disableFrontMatter = true;
	} else if (arg.indexOf(SWITCH_PDF) === 0) {
		genPdf = true;
	} else if (arg.indexOf(SWITCH_VERBOSE) === 0) {
		verbose = true;
	} else if (arg.indexOf(SWITCH_DEBUG) === 0) {
		debug = true;
	} else if (arg.indexOf(SWITCH_TOCXML) === 0) {
		tocXML = true;
	} else if (arg.indexOf(SWITCH_TOCHTML) === 0) {
		tocHTML = true;
	} else if (arg.indexOf(SWITCH_TOCDITA) === 0) {
		tocDITA = true;
	} else if (arg.indexOf(OPTION_TOC_DEPTH) === 0 && arg.indexOf("=") !== -1) {
		tocDepth = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(OPTION_PDFOPTIONSFILE) === 0 && arg.indexOf("=") !== -1) {
		pdfOptionsFile = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(OPTION_EXTENSIONFILE) === 0 && arg.indexOf("=") !== -1) {
		extensionFiles.push(arg.substring(arg.indexOf("=") + 1));
	} else if (arg.indexOf(OPTION_HEADERFILE) === 0 && arg.indexOf("=") !== -1) {
		headerFile = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(OPTION_FOOTERFILE) === 0 && arg.indexOf("=") !== -1) {
		footerFile = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(OPTION_CONREFFILE) === 0 && arg.indexOf("=") !== -1) {
		conrefFile = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(SWITCH_HELP) === 0) {
		help = true;
	} else if (arg.indexOf("-") !== 0) {
		sourceDir = arg;
	} else {
		/* don't display errors for the first two args (the node executable and .js file) */
		if (switchCounter > 2) {
			console.log("*** Ignoring unknown command-line switch: " + arg);
		}
	}
});

if (help || !sourceDir || !destDir) {
	outputHelpPage();
} else {
	var loggerLevel = logger.WARNING;
	if (verbose) {
		loggerLevel = logger.INFO;
	}
	if (debug) {
		loggerLevel = logger.DEBUG;
	}
	var logger = new logger.Logger(loggerLevel);
	
	tocDepth = parseInt(tocDepth || DEFAULT_TOC_DEPTH);
	if (isNaN(tocDepth) || tocDepth < 0) {
		tocDepth = DEFAULT_TOC_DEPTH;
		logger.warning("Invalid " + OPTION_TOC_DEPTH + " value, using default value of " + DEFAULT_TOC_DEPTH + ".");
	}

	console.log("\nProcessing source directory: " + sourceDir + "...\n");

	mdProcessor.generate({
		sourceDir: sourceDir,
		destDir: destDir,
		overwrite: overwrite,
		disableAttributes: disableAttributes,
		disableFrontMatter: disableFrontMatter,
		generatePdf: genPdf,
		pdfOptionsFile: pdfOptionsFile,
		extensionFiles: extensionFiles,
		tocXML: tocXML,
		tocHTML: tocHTML,
		tocDITA: tocDITA,
		tocDepth: tocDepth,
		headerFile: headerFile,
		footerFile: footerFile,
		conrefFile: conrefFile
	}, logger);
}

function outputHelpPage() {
	console.log("\n\nUsage:\n\tmarked-it-cli <sourceDirectory> " + ARG_OUTPUT + "=<destinationDirectory> [OPTIONS]");
	console.log("\nRequired Arguments:\n");
	console.log("<sourceDirectory>");
	console.log("\tThe path of the directory containing source Markdown files");
	console.log(ARG_OUTPUT + "=<destinationDirectory>");
	console.log("\tThe path of the directory to write generated files to");
	console.log("\nOptions:\n");
	console.log(SWITCH_OVERWRITE);
	console.log("\tOverwrite output files that already exist");
	console.log(SWITCH_ATTRIBUTES);
	console.log("\tDisable processing of Kramdown-style attribute lists");
	console.log(SWITCH_FRONTMATTER);
	console.log("\tDisable processing of Jekyll-style front matter blocks");
	console.log(SWITCH_TOCXML);
	console.log("\tGenerate a toc.xml file for directories containing a valid toc file");
	console.log(SWITCH_TOCHTML);
	console.log("\tGenerate a toc.html file for directories containing a valid toc file");
	console.log(SWITCH_TOCDITA);
	console.log("\tGenerate a toc.ditamap file for directories containing a valid toc file");
	console.log(OPTION_TOC_DEPTH + "=<maxHeaderLevel>");
	console.log("\tSet the maximum header level that will appear in toc files (default=" + DEFAULT_TOC_DEPTH + ")");
	console.log(SWITCH_VERBOSE);
	console.log("\tOutput verbose details");
	console.log(SWITCH_DEBUG);
	console.log("\tOutput even more verbose details");
	console.log(SWITCH_PDF);
	console.log("\tGenerate .pdf files");
	console.log(OPTION_PDFOPTIONSFILE + "=<pdfOptionsFile>");
	console.log("\tPath to the file with PDF generation options");
	console.log(OPTION_EXTENSIONFILE + "=<extensionFile>");
	console.log("\tPath to a file containing extensions for customizing generation");
	console.log(OPTION_HEADERFILE + "=<headerSourceFile>");
	console.log("\tPath to the file with content to be prepended to the generated .html");
	console.log(OPTION_FOOTERFILE + "=<footerSourceFile>");
	console.log("\tPath to the file with content to be appended to the generated .html");
	console.log(OPTION_CONREFFILE + "=<conrefFile>");
	console.log("\tPath to the file containing DITA-style variable definitions");
	console.log("\nUse of these options is demonstrated in the \"examples\" directory.");
	console.log("\nHomepage: <https://github.com/grant-g/marked-it-cli>\n");
}
